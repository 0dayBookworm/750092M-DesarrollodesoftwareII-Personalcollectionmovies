// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// MovieMapping represents a row from public.movie_mapping.
type MovieMapping struct {
	ImdbID   string // imdb_id
	Title    string // title
	Year     string // year
	Released string // released
	Runtime  string // runtime
	Genre    string // genre
	Director string // director
	Writer   string // writer
	Actors   string // actors
	Language string // language
	Country  string // country
	Awards   string // awards
	Poster   string // poster
	Plot     string // plot
	Type     string // type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MovieMapping exists in the database.
func (mm *MovieMapping) Exists() bool {
	return mm._exists
}

// Deleted provides information if the MovieMapping has been deleted from the database.
func (mm *MovieMapping) Deleted() bool {
	return mm._deleted
}

// Insert inserts the MovieMapping to the database.
func (mm *MovieMapping) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.movie_mapping (` +
		`title, year, released, runtime, genre, director, writer, actors, language, country, awards, poster, plot, type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING imdb_id`

	// run query
	XOLog(sqlstr, mm.Title, mm.Year, mm.Released, mm.Runtime, mm.Genre, mm.Director, mm.Writer, mm.Actors, mm.Language, mm.Country, mm.Awards, mm.Poster, mm.Plot, mm.Type)
	err = db.QueryRow(sqlstr, mm.Title, mm.Year, mm.Released, mm.Runtime, mm.Genre, mm.Director, mm.Writer, mm.Actors, mm.Language, mm.Country, mm.Awards, mm.Poster, mm.Plot, mm.Type).Scan(&mm.ImdbID)
	if err != nil {
		return err
	}

	// set existence
	mm._exists = true

	return nil
}

// Update updates the MovieMapping in the database.
func (mm *MovieMapping) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.movie_mapping SET (` +
		`title, year, released, runtime, genre, director, writer, actors, language, country, awards, poster, plot, type` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE imdb_id = $15`

	// run query
	XOLog(sqlstr, mm.Title, mm.Year, mm.Released, mm.Runtime, mm.Genre, mm.Director, mm.Writer, mm.Actors, mm.Language, mm.Country, mm.Awards, mm.Poster, mm.Plot, mm.Type, mm.ImdbID)
	_, err = db.Exec(sqlstr, mm.Title, mm.Year, mm.Released, mm.Runtime, mm.Genre, mm.Director, mm.Writer, mm.Actors, mm.Language, mm.Country, mm.Awards, mm.Poster, mm.Plot, mm.Type, mm.ImdbID)
	return err
}

// Save saves the MovieMapping to the database.
func (mm *MovieMapping) Save(db XODB) error {
	if mm.Exists() {
		return mm.Update(db)
	}

	return mm.Insert(db)
}

// Upsert performs an upsert for MovieMapping.
//
// NOTE: PostgreSQL 9.5+ only
func (mm *MovieMapping) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if mm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.movie_mapping (` +
		`imdb_id, title, year, released, runtime, genre, director, writer, actors, language, country, awards, poster, plot, type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (imdb_id) DO UPDATE SET (` +
		`imdb_id, title, year, released, runtime, genre, director, writer, actors, language, country, awards, poster, plot, type` +
		`) = (` +
		`EXCLUDED.imdb_id, EXCLUDED.title, EXCLUDED.year, EXCLUDED.released, EXCLUDED.runtime, EXCLUDED.genre, EXCLUDED.director, EXCLUDED.writer, EXCLUDED.actors, EXCLUDED.language, EXCLUDED.country, EXCLUDED.awards, EXCLUDED.poster, EXCLUDED.plot, EXCLUDED.type` +
		`)`

	// run query
	XOLog(sqlstr, mm.ImdbID, mm.Title, mm.Year, mm.Released, mm.Runtime, mm.Genre, mm.Director, mm.Writer, mm.Actors, mm.Language, mm.Country, mm.Awards, mm.Poster, mm.Plot, mm.Type)
	_, err = db.Exec(sqlstr, mm.ImdbID, mm.Title, mm.Year, mm.Released, mm.Runtime, mm.Genre, mm.Director, mm.Writer, mm.Actors, mm.Language, mm.Country, mm.Awards, mm.Poster, mm.Plot, mm.Type)
	if err != nil {
		return err
	}

	// set existence
	mm._exists = true

	return nil
}

// Delete deletes the MovieMapping from the database.
func (mm *MovieMapping) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mm._exists {
		return nil
	}

	// if deleted, bail
	if mm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.movie_mapping WHERE imdb_id = $1`

	// run query
	XOLog(sqlstr, mm.ImdbID)
	_, err = db.Exec(sqlstr, mm.ImdbID)
	if err != nil {
		return err
	}

	// set deleted
	mm._deleted = true

	return nil
}

// MovieMappingByImdbID retrieves a row from 'public.movie_mapping' as a MovieMapping.
//
// Generated from index 'pk_movie_mapping'.
func MovieMappingByImdbID(db XODB, imdbID string) (*MovieMapping, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`imdb_id, title, year, released, runtime, genre, director, writer, actors, language, country, awards, poster, plot, type ` +
		`FROM public.movie_mapping ` +
		`WHERE imdb_id = $1`

	// run query
	XOLog(sqlstr, imdbID)
	mm := MovieMapping{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, imdbID).Scan(&mm.ImdbID, &mm.Title, &mm.Year, &mm.Released, &mm.Runtime, &mm.Genre, &mm.Director, &mm.Writer, &mm.Actors, &mm.Language, &mm.Country, &mm.Awards, &mm.Poster, &mm.Plot, &mm.Type)
	if err != nil {
		return nil, err
	}

	return &mm, nil
}
