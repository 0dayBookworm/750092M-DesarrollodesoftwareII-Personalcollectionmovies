// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// MovieMapping represents a row from public.movie_mapping.
type MovieMapping struct {
	ID            string  // id
	Title         string  // title
	OriginalTitle string  // original_title
	ReleaseDate   string    // release_date
	VoteAverage   float64 // vote_average
	PosterPath    string  // poster_path

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MovieMapping exists in the database.
func (mm *MovieMapping) Exists() bool {
	return mm._exists
}

// Deleted provides information if the MovieMapping has been deleted from the database.
func (mm *MovieMapping) Deleted() bool {
	return mm._deleted
}

// Insert inserts the MovieMapping to the database.
func (mm *MovieMapping) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.movie_mapping (` +
		`id, title, original_title, release_date, vote_average, poster_path` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, mm.ID, mm.Title, mm.OriginalTitle, mm.ReleaseDate, mm.VoteAverage, mm.PosterPath)
	err = db.QueryRow(sqlstr, mm.ID, mm.Title, mm.OriginalTitle, mm.ReleaseDate, mm.VoteAverage, mm.PosterPath).Scan(&mm.ID)
	if err != nil {
		return err
	}

	// set existence
	mm._exists = true

	return nil
}

// Update updates the MovieMapping in the database.
func (mm *MovieMapping) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.movie_mapping SET (` +
		`title, original_title, release_date, vote_average, poster_path` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, mm.Title, mm.OriginalTitle, mm.ReleaseDate, mm.VoteAverage, mm.PosterPath, mm.ID)
	_, err = db.Exec(sqlstr, mm.Title, mm.OriginalTitle, mm.ReleaseDate, mm.VoteAverage, mm.PosterPath, mm.ID)
	return err
}

// Save saves the MovieMapping to the database.
func (mm *MovieMapping) Save(db XODB) error {
	if mm.Exists() {
		return mm.Update(db)
	}

	return mm.Insert(db)
}

// Upsert performs an upsert for MovieMapping.
//
// NOTE: PostgreSQL 9.5+ only
func (mm *MovieMapping) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if mm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.movie_mapping (` +
		`id, title, original_title, release_date, vote_average, poster_path` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, title, original_title, release_date, vote_average, poster_path` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.title, EXCLUDED.original_title, EXCLUDED.release_date, EXCLUDED.vote_average, EXCLUDED.poster_path` +
		`)`

	// run query
	XOLog(sqlstr, mm.ID, mm.Title, mm.OriginalTitle, mm.ReleaseDate, mm.VoteAverage, mm.PosterPath)
	_, err = db.Exec(sqlstr, mm.ID, mm.Title, mm.OriginalTitle, mm.ReleaseDate, mm.VoteAverage, mm.PosterPath)
	if err != nil {
		return err
	}

	// set existence
	mm._exists = true

	return nil
}

// Delete deletes the MovieMapping from the database.
func (mm *MovieMapping) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mm._exists {
		return nil
	}

	// if deleted, bail
	if mm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.movie_mapping WHERE id = $1`

	// run query
	XOLog(sqlstr, mm.ID)
	_, err = db.Exec(sqlstr, mm.ID)
	if err != nil {
		return err
	}

	// set deleted
	mm._deleted = true

	return nil
}

// MovieMappingByID retrieves a row from 'public.movie_mapping' as a MovieMapping.
//
// Generated from index 'pk_movie_mapping'.
func MovieMappingByID(db XODB, id string) (*MovieMapping, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, title, original_title, release_date, vote_average, poster_path ` +
		`FROM public.movie_mapping ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	mm := MovieMapping{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mm.ID, &mm.Title, &mm.OriginalTitle, &mm.ReleaseDate, &mm.VoteAverage, &mm.PosterPath)
	if err != nil {
		return nil, err
	}

	return &mm, nil
}
