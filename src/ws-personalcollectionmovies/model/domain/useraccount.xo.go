// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Useraccount represents a row from public.useraccount.
type Useraccount struct {
	Username   string // username
	FirstName  string // first_name
	SecondName string // second_name
	LastName   string // last_name
	BirthDate  time.Time   // birth_date
	Gender     string // gender
	Country    string // country
	Email      string // email
	Erased     bool   // erased

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Useraccount exists in the database.
func (u *Useraccount) Exists() bool {
	return u._exists
}

// Deleted provides information if the Useraccount has been deleted from the database.
func (u *Useraccount) Deleted() bool {
	return u._deleted
}

// Insert inserts the Useraccount to the database.
func (u *Useraccount) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.useraccount (` +
		`first_name, second_name, last_name, birth_date, gender, country, email, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING username`

	// run query
	XOLog(sqlstr, u.FirstName, u.SecondName, u.LastName, u.BirthDate, u.Gender, u.Country, u.Email, u.Erased)
	err = db.QueryRow(sqlstr, u.FirstName, u.SecondName, u.LastName, u.BirthDate, u.Gender, u.Country, u.Email, u.Erased).Scan(&u.Username)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the Useraccount in the database.
func (u *Useraccount) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.useraccount SET (` +
		`first_name, second_name, last_name, birth_date, gender, country, email, erased` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE username = $9`

	// run query
	XOLog(sqlstr, u.FirstName, u.SecondName, u.LastName, u.BirthDate, u.Gender, u.Country, u.Email, u.Erased, u.Username)
	_, err = db.Exec(sqlstr, u.FirstName, u.SecondName, u.LastName, u.BirthDate, u.Gender, u.Country, u.Email, u.Erased, u.Username)
	return err
}

// Save saves the Useraccount to the database.
func (u *Useraccount) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for Useraccount.
//
// NOTE: PostgreSQL 9.5+ only
func (u *Useraccount) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.useraccount (` +
		`username, first_name, second_name, last_name, birth_date, gender, country, email, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (username) DO UPDATE SET (` +
		`username, first_name, second_name, last_name, birth_date, gender, country, email, erased` +
		`) = (` +
		`EXCLUDED.username, EXCLUDED.first_name, EXCLUDED.second_name, EXCLUDED.last_name, EXCLUDED.birth_date, EXCLUDED.gender, EXCLUDED.country, EXCLUDED.email, EXCLUDED.erased` +
		`)`

	// run query
	XOLog(sqlstr, u.Username, u.FirstName, u.SecondName, u.LastName, u.BirthDate, u.Gender, u.Country, u.Email, u.Erased)
	_, err = db.Exec(sqlstr, u.Username, u.FirstName, u.SecondName, u.LastName, u.BirthDate, u.Gender, u.Country, u.Email, u.Erased)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the Useraccount from the database.
func (u *Useraccount) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.useraccount WHERE username = $1`

	// run query
	XOLog(sqlstr, u.Username)
	_, err = db.Exec(sqlstr, u.Username)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// Root returns the Root associated with the Useraccount's Username (username).
//
// Generated from foreign key 'root_useraccount_fk'.
func (u *Useraccount) Root(db XODB) (*Root, error) {
	return RootByUsername(db, u.Username)
}

// UseraccountByUsername retrieves a row from 'public.useraccount' as a Useraccount.
//
// Generated from index 'pk_useraccount'.
func UseraccountByUsername(db XODB, username string) (*Useraccount, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`username, first_name, second_name, last_name, birth_date, gender, country, email, erased ` +
		`FROM public.useraccount ` +
		`WHERE username = $1`

	// run query
	XOLog(sqlstr, username)
	u := Useraccount{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&u.Username, &u.FirstName, &u.SecondName, &u.LastName, &u.BirthDate, &u.Gender, &u.Country, &u.Email, &u.Erased)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
