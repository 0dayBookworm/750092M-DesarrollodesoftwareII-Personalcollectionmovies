// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// UserAccount represents a row from public.user_account.
type UserAccount struct {
	Username  string // username
	FirstName string // first_name
	SecondNam string // second_nam
	LastName  string // last_name
	BirthDate Date   // birth_date
	Gender    uint8  // gender
	Country   string // country
	Email     string // email
	Erased    uint8  // erased

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserAccount exists in the database.
func (ua *UserAccount) Exists() bool {
	return ua._exists
}

// Deleted provides information if the UserAccount has been deleted from the database.
func (ua *UserAccount) Deleted() bool {
	return ua._deleted
}

// Insert inserts the UserAccount to the database.
func (ua *UserAccount) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ua._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_account (` +
		`first_name, second_nam, last_name, birth_date, gender, country, email, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING username`

	// run query
	XOLog(sqlstr, ua.FirstName, ua.SecondNam, ua.LastName, ua.BirthDate, ua.Gender, ua.Country, ua.Email, ua.Erased)
	err = db.QueryRow(sqlstr, ua.FirstName, ua.SecondNam, ua.LastName, ua.BirthDate, ua.Gender, ua.Country, ua.Email, ua.Erased).Scan(&ua.Username)
	if err != nil {
		return err
	}

	// set existence
	ua._exists = true

	return nil
}

// Update updates the UserAccount in the database.
func (ua *UserAccount) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ua._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ua._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user_account SET (` +
		`first_name, second_nam, last_name, birth_date, gender, country, email, erased` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE username = $9`

	// run query
	XOLog(sqlstr, ua.FirstName, ua.SecondNam, ua.LastName, ua.BirthDate, ua.Gender, ua.Country, ua.Email, ua.Erased, ua.Username)
	_, err = db.Exec(sqlstr, ua.FirstName, ua.SecondNam, ua.LastName, ua.BirthDate, ua.Gender, ua.Country, ua.Email, ua.Erased, ua.Username)
	return err
}

// Save saves the UserAccount to the database.
func (ua *UserAccount) Save(db XODB) error {
	if ua.Exists() {
		return ua.Update(db)
	}

	return ua.Insert(db)
}

// Upsert performs an upsert for UserAccount.
//
// NOTE: PostgreSQL 9.5+ only
func (ua *UserAccount) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ua._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_account (` +
		`username, first_name, second_nam, last_name, birth_date, gender, country, email, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (username) DO UPDATE SET (` +
		`username, first_name, second_nam, last_name, birth_date, gender, country, email, erased` +
		`) = (` +
		`EXCLUDED.username, EXCLUDED.first_name, EXCLUDED.second_nam, EXCLUDED.last_name, EXCLUDED.birth_date, EXCLUDED.gender, EXCLUDED.country, EXCLUDED.email, EXCLUDED.erased` +
		`)`

	// run query
	XOLog(sqlstr, ua.Username, ua.FirstName, ua.SecondNam, ua.LastName, ua.BirthDate, ua.Gender, ua.Country, ua.Email, ua.Erased)
	_, err = db.Exec(sqlstr, ua.Username, ua.FirstName, ua.SecondNam, ua.LastName, ua.BirthDate, ua.Gender, ua.Country, ua.Email, ua.Erased)
	if err != nil {
		return err
	}

	// set existence
	ua._exists = true

	return nil
}

// Delete deletes the UserAccount from the database.
func (ua *UserAccount) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ua._exists {
		return nil
	}

	// if deleted, bail
	if ua._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user_account WHERE username = $1`

	// run query
	XOLog(sqlstr, ua.Username)
	_, err = db.Exec(sqlstr, ua.Username)
	if err != nil {
		return err
	}

	// set deleted
	ua._deleted = true

	return nil
}

// Root returns the Root associated with the UserAccount's Username (username).
//
// Generated from foreign key 'fk_user_account_root1'.
func (ua *UserAccount) Root(db XODB) (*Root, error) {
	return RootByUsername(db, ua.Username)
}

// UserAccountByUsername retrieves a row from 'public.user_account' as a UserAccount.
//
// Generated from index 'user_account_pkey'.
func UserAccountByUsername(db XODB, username string) (*UserAccount, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`username, first_name, second_nam, last_name, birth_date, gender, country, email, erased ` +
		`FROM public.user_account ` +
		`WHERE username = $1`

	// run query
	XOLog(sqlstr, username)
	ua := UserAccount{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&ua.Username, &ua.FirstName, &ua.SecondNam, &ua.LastName, &ua.BirthDate, &ua.Gender, &ua.Country, &ua.Email, &ua.Erased)
	if err != nil {
		return nil, err
	}

	return &ua, nil
}
