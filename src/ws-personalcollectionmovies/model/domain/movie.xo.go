// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Movie represents a row from public.movie.
type Movie struct {
	ImdbID string // imdb_id
	Title  string // title

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Movie exists in the database.
func (m *Movie) Exists() bool {
	return m._exists
}

// Deleted provides information if the Movie has been deleted from the database.
func (m *Movie) Deleted() bool {
	return m._deleted
}

// Insert inserts the Movie to the database.
func (m *Movie) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.movie (` +
		`imdb_id` +
		`) VALUES (` +
		`$1` +
		`) RETURNING title`

	// run query
	XOLog(sqlstr, m.ImdbID)
	err = db.QueryRow(sqlstr, m.ImdbID).Scan(&m.Title)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Movie in the database.
func (m *Movie) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.movie SET (` +
		`imdb_id` +
		`) = ( ` +
		`$1` +
		`) WHERE title = $2`

	// run query
	XOLog(sqlstr, m.ImdbID, m.Title)
	_, err = db.Exec(sqlstr, m.ImdbID, m.Title)
	return err
}

// Save saves the Movie to the database.
func (m *Movie) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Movie.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Movie) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.movie (` +
		`imdb_id, title` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (title) DO UPDATE SET (` +
		`imdb_id, title` +
		`) = (` +
		`EXCLUDED.imdb_id, EXCLUDED.title` +
		`)`

	// run query
	XOLog(sqlstr, m.ImdbID, m.Title)
	_, err = db.Exec(sqlstr, m.ImdbID, m.Title)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Movie from the database.
func (m *Movie) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.movie WHERE title = $1`

	// run query
	XOLog(sqlstr, m.Title)
	_, err = db.Exec(sqlstr, m.Title)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MovieByImdbIDTitle retrieves a row from 'public.movie' as a Movie.
//
// Generated from index 'movie_pkey'.
func MovieByImdbIDTitle(db XODB, imdbID string, title string) (*Movie, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`imdb_id, title ` +
		`FROM public.movie ` +
		`WHERE imdb_id = $1 AND title = $2`

	// run query
	XOLog(sqlstr, imdbID, title)
	m := Movie{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, imdbID, title).Scan(&m.ImdbID, &m.Title)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
