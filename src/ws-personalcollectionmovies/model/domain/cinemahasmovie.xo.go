// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// CinemaHasMovie represents a row from public.cinema_has_movie.
type CinemaHasMovie struct {
	IDCinema    string // id_cinema
	ImdbID      string // imdb_id
	Title       string // title
	Dateandtime Date   // dateandtime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CinemaHasMovie exists in the database.
func (chm *CinemaHasMovie) Exists() bool {
	return chm._exists
}

// Deleted provides information if the CinemaHasMovie has been deleted from the database.
func (chm *CinemaHasMovie) Deleted() bool {
	return chm._deleted
}

// Insert inserts the CinemaHasMovie to the database.
func (chm *CinemaHasMovie) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if chm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.cinema_has_movie (` +
		`id_cinema, imdb_id, title` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING dateandtime`

	// run query
	XOLog(sqlstr, chm.IDCinema, chm.ImdbID, chm.Title)
	err = db.QueryRow(sqlstr, chm.IDCinema, chm.ImdbID, chm.Title).Scan(&chm.Dateandtime)
	if err != nil {
		return err
	}

	// set existence
	chm._exists = true

	return nil
}

// Update updates the CinemaHasMovie in the database.
func (chm *CinemaHasMovie) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !chm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if chm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.cinema_has_movie SET (` +
		`id_cinema, imdb_id, title` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE dateandtime = $4`

	// run query
	XOLog(sqlstr, chm.IDCinema, chm.ImdbID, chm.Title, chm.Dateandtime)
	_, err = db.Exec(sqlstr, chm.IDCinema, chm.ImdbID, chm.Title, chm.Dateandtime)
	return err
}

// Save saves the CinemaHasMovie to the database.
func (chm *CinemaHasMovie) Save(db XODB) error {
	if chm.Exists() {
		return chm.Update(db)
	}

	return chm.Insert(db)
}

// Upsert performs an upsert for CinemaHasMovie.
//
// NOTE: PostgreSQL 9.5+ only
func (chm *CinemaHasMovie) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if chm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.cinema_has_movie (` +
		`id_cinema, imdb_id, title, dateandtime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (dateandtime) DO UPDATE SET (` +
		`id_cinema, imdb_id, title, dateandtime` +
		`) = (` +
		`EXCLUDED.id_cinema, EXCLUDED.imdb_id, EXCLUDED.title, EXCLUDED.dateandtime` +
		`)`

	// run query
	XOLog(sqlstr, chm.IDCinema, chm.ImdbID, chm.Title, chm.Dateandtime)
	_, err = db.Exec(sqlstr, chm.IDCinema, chm.ImdbID, chm.Title, chm.Dateandtime)
	if err != nil {
		return err
	}

	// set existence
	chm._exists = true

	return nil
}

// Delete deletes the CinemaHasMovie from the database.
func (chm *CinemaHasMovie) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !chm._exists {
		return nil
	}

	// if deleted, bail
	if chm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.cinema_has_movie WHERE dateandtime = $1`

	// run query
	XOLog(sqlstr, chm.Dateandtime)
	_, err = db.Exec(sqlstr, chm.Dateandtime)
	if err != nil {
		return err
	}

	// set deleted
	chm._deleted = true

	return nil
}

// Cinema returns the Cinema associated with the CinemaHasMovie's IDCinema (id_cinema).
//
// Generated from foreign key 'fk_cinema_has_movie_cinema1'.
func (chm *CinemaHasMovie) Cinema(db XODB) (*Cinema, error) {
	return CinemaByIDCinema(db, chm.IDCinema)
}

// Movie returns the Movie associated with the CinemaHasMovie's Title (title).
//
// Generated from foreign key 'fk_cinema_has_movie_movie1'.
func (chm *CinemaHasMovie) Movie(db XODB) (*Movie, error) {
	return MovieByTitle(db, chm.Title)
}

// CinemaHasMovieByIDCinemaImdbIDTitleDateandtime retrieves a row from 'public.cinema_has_movie' as a CinemaHasMovie.
//
// Generated from index 'cinema_has_movie_pkey'.
func CinemaHasMovieByIDCinemaImdbIDTitleDateandtime(db XODB, idCinema string, imdbID string, title string, dateandtime Date) (*CinemaHasMovie, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id_cinema, imdb_id, title, dateandtime ` +
		`FROM public.cinema_has_movie ` +
		`WHERE id_cinema = $1 AND imdb_id = $2 AND title = $3 AND dateandtime = $4`

	// run query
	XOLog(sqlstr, idCinema, imdbID, title, dateandtime)
	chm := CinemaHasMovie{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, idCinema, imdbID, title, dateandtime).Scan(&chm.IDCinema, &chm.ImdbID, &chm.Title, &chm.Dateandtime)
	if err != nil {
		return nil, err
	}

	return &chm, nil
}
