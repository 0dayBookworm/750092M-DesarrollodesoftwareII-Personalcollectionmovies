// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Root represents a row from public.root.
type Root struct {
	Username string // username
	Password string // password

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Root exists in the database.
func (r *Root) Exists() bool {
	return r._exists
}

// Deleted provides information if the Root has been deleted from the database.
func (r *Root) Deleted() bool {
	return r._deleted
}

// Insert inserts the Root to the database.
func (r *Root) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.root (` +
		`password` +
		`) VALUES (` +
		`$1` +
		`) RETURNING username`

	// run query
	XOLog(sqlstr, r.Password)
	err = db.QueryRow(sqlstr, r.Password).Scan(&r.Username)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Root in the database.
func (r *Root) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.root SET (` +
		`password` +
		`) = ( ` +
		`$1` +
		`) WHERE username = $2`

	// run query
	XOLog(sqlstr, r.Password, r.Username)
	_, err = db.Exec(sqlstr, r.Password, r.Username)
	return err
}

// Save saves the Root to the database.
func (r *Root) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Root.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Root) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.root (` +
		`username, password` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (username) DO UPDATE SET (` +
		`username, password` +
		`) = (` +
		`EXCLUDED.username, EXCLUDED.password` +
		`)`

	// run query
	XOLog(sqlstr, r.Username, r.Password)
	_, err = db.Exec(sqlstr, r.Username, r.Password)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Root from the database.
func (r *Root) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.root WHERE username = $1`

	// run query
	XOLog(sqlstr, r.Username)
	_, err = db.Exec(sqlstr, r.Username)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RootByUsername retrieves a row from 'public.root' as a Root.
//
// Generated from index 'root_pkey'.
func RootByUsername(db XODB, username string) (*Root, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`username, password ` +
		`FROM public.root ` +
		`WHERE username = $1`

	// run query
	XOLog(sqlstr, username)
	r := Root{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&r.Username, &r.Password)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
