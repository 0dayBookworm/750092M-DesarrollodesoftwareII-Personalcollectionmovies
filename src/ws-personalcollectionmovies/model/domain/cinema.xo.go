// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Cinema represents a row from public.cinema.
type Cinema struct {
	IDCinema string // id_cinema
	Name     string // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cinema exists in the database.
func (c *Cinema) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cinema has been deleted from the database.
func (c *Cinema) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cinema to the database.
func (c *Cinema) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.cinema (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id_cinema`

	// run query
	XOLog(sqlstr, c.Name)
	err = db.QueryRow(sqlstr, c.Name).Scan(&c.IDCinema)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cinema in the database.
func (c *Cinema) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.cinema SET (` +
		`name` +
		`) = ( ` +
		`$1` +
		`) WHERE id_cinema = $2`

	// run query
	XOLog(sqlstr, c.Name, c.IDCinema)
	_, err = db.Exec(sqlstr, c.Name, c.IDCinema)
	return err
}

// Save saves the Cinema to the database.
func (c *Cinema) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Cinema.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Cinema) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.cinema (` +
		`id_cinema, name` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id_cinema) DO UPDATE SET (` +
		`id_cinema, name` +
		`) = (` +
		`EXCLUDED.id_cinema, EXCLUDED.name` +
		`)`

	// run query
	XOLog(sqlstr, c.IDCinema, c.Name)
	_, err = db.Exec(sqlstr, c.IDCinema, c.Name)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Cinema from the database.
func (c *Cinema) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.cinema WHERE id_cinema = $1`

	// run query
	XOLog(sqlstr, c.IDCinema)
	_, err = db.Exec(sqlstr, c.IDCinema)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CinemaByIDCinema retrieves a row from 'public.cinema' as a Cinema.
//
// Generated from index 'cinema_pkey'.
func CinemaByIDCinema(db XODB, idCinema string) (*Cinema, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id_cinema, name ` +
		`FROM public.cinema ` +
		`WHERE id_cinema = $1`

	// run query
	XOLog(sqlstr, idCinema)
	c := Cinema{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, idCinema).Scan(&c.IDCinema, &c.Name)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
