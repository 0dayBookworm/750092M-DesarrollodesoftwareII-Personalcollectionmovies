// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Audit represents a row from public.audit.
type Audit struct {
	IDAudit     string         // id_audit
	Username    string         // username
	TableName   string         // table_name
	Operation   string         // operation
	OldValue    sql.NullString // old_value
	NewValue    sql.NullString // new_value
	Dateandtime Date           // dateandtime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Audit exists in the database.
func (a *Audit) Exists() bool {
	return a._exists
}

// Deleted provides information if the Audit has been deleted from the database.
func (a *Audit) Deleted() bool {
	return a._deleted
}

// Insert inserts the Audit to the database.
func (a *Audit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.audit (` +
		`username, table_name, operation, old_value, new_value, dateandtime` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id_audit`

	// run query
	XOLog(sqlstr, a.Username, a.TableName, a.Operation, a.OldValue, a.NewValue, a.Dateandtime)
	err = db.QueryRow(sqlstr, a.Username, a.TableName, a.Operation, a.OldValue, a.NewValue, a.Dateandtime).Scan(&a.IDAudit)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Audit in the database.
func (a *Audit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.audit SET (` +
		`username, table_name, operation, old_value, new_value, dateandtime` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id_audit = $7`

	// run query
	XOLog(sqlstr, a.Username, a.TableName, a.Operation, a.OldValue, a.NewValue, a.Dateandtime, a.IDAudit)
	_, err = db.Exec(sqlstr, a.Username, a.TableName, a.Operation, a.OldValue, a.NewValue, a.Dateandtime, a.IDAudit)
	return err
}

// Save saves the Audit to the database.
func (a *Audit) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Audit.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Audit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.audit (` +
		`id_audit, username, table_name, operation, old_value, new_value, dateandtime` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id_audit) DO UPDATE SET (` +
		`id_audit, username, table_name, operation, old_value, new_value, dateandtime` +
		`) = (` +
		`EXCLUDED.id_audit, EXCLUDED.username, EXCLUDED.table_name, EXCLUDED.operation, EXCLUDED.old_value, EXCLUDED.new_value, EXCLUDED.dateandtime` +
		`)`

	// run query
	XOLog(sqlstr, a.IDAudit, a.Username, a.TableName, a.Operation, a.OldValue, a.NewValue, a.Dateandtime)
	_, err = db.Exec(sqlstr, a.IDAudit, a.Username, a.TableName, a.Operation, a.OldValue, a.NewValue, a.Dateandtime)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Audit from the database.
func (a *Audit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.audit WHERE id_audit = $1`

	// run query
	XOLog(sqlstr, a.IDAudit)
	_, err = db.Exec(sqlstr, a.IDAudit)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Root returns the Root associated with the Audit's Username (username).
//
// Generated from foreign key 'usernameaudit'.
func (a *Audit) Root(db XODB) (*Root, error) {
	return RootByUsername(db, a.Username)
}

// AuditByIDAudit retrieves a row from 'public.audit' as a Audit.
//
// Generated from index 'audit_pkey'.
func AuditByIDAudit(db XODB, idAudit string) (*Audit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id_audit, username, table_name, operation, old_value, new_value, dateandtime ` +
		`FROM public.audit ` +
		`WHERE id_audit = $1`

	// run query
	XOLog(sqlstr, idAudit)
	a := Audit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, idAudit).Scan(&a.IDAudit, &a.Username, &a.TableName, &a.Operation, &a.OldValue, &a.NewValue, &a.Dateandtime)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
