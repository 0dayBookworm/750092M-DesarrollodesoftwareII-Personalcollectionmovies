// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// UserScoreMovie represents a row from public.user_score_movie.
type UserScoreMovie struct {
	Username string  // username
	ImdbID   string  // imdb_id
	Title    string  // title
	Date     Date    // date
	Score    float64 // score
	Erased   uint8   // erased

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserScoreMovie exists in the database.
func (usm *UserScoreMovie) Exists() bool {
	return usm._exists
}

// Deleted provides information if the UserScoreMovie has been deleted from the database.
func (usm *UserScoreMovie) Deleted() bool {
	return usm._deleted
}

// Insert inserts the UserScoreMovie to the database.
func (usm *UserScoreMovie) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if usm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_score_movie (` +
		`username, imdb_id, date, score, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING title`

	// run query
	XOLog(sqlstr, usm.Username, usm.ImdbID, usm.Date, usm.Score, usm.Erased)
	err = db.QueryRow(sqlstr, usm.Username, usm.ImdbID, usm.Date, usm.Score, usm.Erased).Scan(&usm.Title)
	if err != nil {
		return err
	}

	// set existence
	usm._exists = true

	return nil
}

// Update updates the UserScoreMovie in the database.
func (usm *UserScoreMovie) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !usm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if usm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user_score_movie SET (` +
		`username, imdb_id, date, score, erased` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE title = $6`

	// run query
	XOLog(sqlstr, usm.Username, usm.ImdbID, usm.Date, usm.Score, usm.Erased, usm.Title)
	_, err = db.Exec(sqlstr, usm.Username, usm.ImdbID, usm.Date, usm.Score, usm.Erased, usm.Title)
	return err
}

// Save saves the UserScoreMovie to the database.
func (usm *UserScoreMovie) Save(db XODB) error {
	if usm.Exists() {
		return usm.Update(db)
	}

	return usm.Insert(db)
}

// Upsert performs an upsert for UserScoreMovie.
//
// NOTE: PostgreSQL 9.5+ only
func (usm *UserScoreMovie) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if usm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_score_movie (` +
		`username, imdb_id, title, date, score, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (title) DO UPDATE SET (` +
		`username, imdb_id, title, date, score, erased` +
		`) = (` +
		`EXCLUDED.username, EXCLUDED.imdb_id, EXCLUDED.title, EXCLUDED.date, EXCLUDED.score, EXCLUDED.erased` +
		`)`

	// run query
	XOLog(sqlstr, usm.Username, usm.ImdbID, usm.Title, usm.Date, usm.Score, usm.Erased)
	_, err = db.Exec(sqlstr, usm.Username, usm.ImdbID, usm.Title, usm.Date, usm.Score, usm.Erased)
	if err != nil {
		return err
	}

	// set existence
	usm._exists = true

	return nil
}

// Delete deletes the UserScoreMovie from the database.
func (usm *UserScoreMovie) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !usm._exists {
		return nil
	}

	// if deleted, bail
	if usm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user_score_movie WHERE title = $1`

	// run query
	XOLog(sqlstr, usm.Title)
	_, err = db.Exec(sqlstr, usm.Title)
	if err != nil {
		return err
	}

	// set deleted
	usm._deleted = true

	return nil
}

// Movie returns the Movie associated with the UserScoreMovie's Title (title).
//
// Generated from foreign key 'fk_user_account_has_movie_movie1'.
func (usm *UserScoreMovie) Movie(db XODB) (*Movie, error) {
	return MovieByTitle(db, usm.Title)
}

// UserAccount returns the UserAccount associated with the UserScoreMovie's Username (username).
//
// Generated from foreign key 'fk_user_account_has_movie_user_account1'.
func (usm *UserScoreMovie) UserAccount(db XODB) (*UserAccount, error) {
	return UserAccountByUsername(db, usm.Username)
}

// UserScoreMovieByUsernameImdbIDTitle retrieves a row from 'public.user_score_movie' as a UserScoreMovie.
//
// Generated from index 'user_score_movie_pkey'.
func UserScoreMovieByUsernameImdbIDTitle(db XODB, username string, imdbID string, title string) (*UserScoreMovie, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`username, imdb_id, title, date, score, erased ` +
		`FROM public.user_score_movie ` +
		`WHERE username = $1 AND imdb_id = $2 AND title = $3`

	// run query
	XOLog(sqlstr, username, imdbID, title)
	usm := UserScoreMovie{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username, imdbID, title).Scan(&usm.Username, &usm.ImdbID, &usm.Title, &usm.Date, &usm.Score, &usm.Erased)
	if err != nil {
		return nil, err
	}

	return &usm, nil
}
