// Package domain contains the types for schema 'public'.
package domain

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// UserViewMovie represents a row from public.user_view_movie.
type UserViewMovie struct {
	Username string // username
	ImdbID   string // imdb_id
	Title    string // title
	Date     Date   // date
	Erased   uint8  // erased

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserViewMovie exists in the database.
func (uvm *UserViewMovie) Exists() bool {
	return uvm._exists
}

// Deleted provides information if the UserViewMovie has been deleted from the database.
func (uvm *UserViewMovie) Deleted() bool {
	return uvm._deleted
}

// Insert inserts the UserViewMovie to the database.
func (uvm *UserViewMovie) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uvm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_view_movie (` +
		`username, imdb_id, date, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING title`

	// run query
	XOLog(sqlstr, uvm.Username, uvm.ImdbID, uvm.Date, uvm.Erased)
	err = db.QueryRow(sqlstr, uvm.Username, uvm.ImdbID, uvm.Date, uvm.Erased).Scan(&uvm.Title)
	if err != nil {
		return err
	}

	// set existence
	uvm._exists = true

	return nil
}

// Update updates the UserViewMovie in the database.
func (uvm *UserViewMovie) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uvm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uvm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user_view_movie SET (` +
		`username, imdb_id, date, erased` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE title = $5`

	// run query
	XOLog(sqlstr, uvm.Username, uvm.ImdbID, uvm.Date, uvm.Erased, uvm.Title)
	_, err = db.Exec(sqlstr, uvm.Username, uvm.ImdbID, uvm.Date, uvm.Erased, uvm.Title)
	return err
}

// Save saves the UserViewMovie to the database.
func (uvm *UserViewMovie) Save(db XODB) error {
	if uvm.Exists() {
		return uvm.Update(db)
	}

	return uvm.Insert(db)
}

// Upsert performs an upsert for UserViewMovie.
//
// NOTE: PostgreSQL 9.5+ only
func (uvm *UserViewMovie) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if uvm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_view_movie (` +
		`username, imdb_id, title, date, erased` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (title) DO UPDATE SET (` +
		`username, imdb_id, title, date, erased` +
		`) = (` +
		`EXCLUDED.username, EXCLUDED.imdb_id, EXCLUDED.title, EXCLUDED.date, EXCLUDED.erased` +
		`)`

	// run query
	XOLog(sqlstr, uvm.Username, uvm.ImdbID, uvm.Title, uvm.Date, uvm.Erased)
	_, err = db.Exec(sqlstr, uvm.Username, uvm.ImdbID, uvm.Title, uvm.Date, uvm.Erased)
	if err != nil {
		return err
	}

	// set existence
	uvm._exists = true

	return nil
}

// Delete deletes the UserViewMovie from the database.
func (uvm *UserViewMovie) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uvm._exists {
		return nil
	}

	// if deleted, bail
	if uvm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user_view_movie WHERE title = $1`

	// run query
	XOLog(sqlstr, uvm.Title)
	_, err = db.Exec(sqlstr, uvm.Title)
	if err != nil {
		return err
	}

	// set deleted
	uvm._deleted = true

	return nil
}

// Movie returns the Movie associated with the UserViewMovie's Title (title).
//
// Generated from foreign key 'fk_user_account_has_movie1_movie2'.
func (uvm *UserViewMovie) Movie(db XODB) (*Movie, error) {
	return MovieByTitle(db, uvm.Title)
}

// UserAccount returns the UserAccount associated with the UserViewMovie's Username (username).
//
// Generated from foreign key 'fk_user_account_has_movie1_user_account2'.
func (uvm *UserViewMovie) UserAccount(db XODB) (*UserAccount, error) {
	return UserAccountByUsername(db, uvm.Username)
}

// UserViewMovieByUsernameImdbIDTitle retrieves a row from 'public.user_view_movie' as a UserViewMovie.
//
// Generated from index 'user_view_movie_pkey'.
func UserViewMovieByUsernameImdbIDTitle(db XODB, username string, imdbID string, title string) (*UserViewMovie, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`username, imdb_id, title, date, erased ` +
		`FROM public.user_view_movie ` +
		`WHERE username = $1 AND imdb_id = $2 AND title = $3`

	// run query
	XOLog(sqlstr, username, imdbID, title)
	uvm := UserViewMovie{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username, imdbID, title).Scan(&uvm.Username, &uvm.ImdbID, &uvm.Title, &uvm.Date, &uvm.Erased)
	if err != nil {
		return nil, err
	}

	return &uvm, nil
}
